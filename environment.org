#+TITLE: Environment

* HOME environment variable
Hardcoded at present. A more robust option could be to make the =%HOME%= variable point to =%USERPROFILE%=.

* Fonts
** all-the-icons
** Source Code Pro
Easily available online.

* Git
** GitHub Desktop and SourceTree
** Add Git utilities to PATH
[[C:\Program Files\Git\usr\bin]]
** Remember credentials/access token
Run =git config --global credential.helper store=

* LaTeX
** MiKTeX
Ensure the dvipng and dvisvgm packages are installed.

* WSL
** Installation
Run =wsl --install= in Windows Terminal.
*** Known issues
**** Persistent reboot request
Try toggling Hyper-V in Windows optional features.

* Spellcheck
** Hunspell
On WSL, =sudo apt-get update && sudo apt-get install hunspell=
Dictionaries can be acquired from https://cgit.freedesktop.org/libreoffice/dictionaries/

* C++
** Install LLVM for Windows
Installs clang, clangd, clang-tidy, clang-format, etc.
** Install Visual Studio
Provides the C++ std library.
** Clangd configuration
In [[%LocalAppData%\clangd\config.yaml]]

#+BEGIN_SRC yaml
CompileFlags:
  Add: [-xc++, -Wall, -Wextra, -std=c++20, -pedantic-errors,
        -Wshadow, -Wnon-virtual-dtor, -Wold-style-cast, -Wcast-align,
        -Wunused, -Woverloaded-virtual, -Wconversion, -Wsign-conversion,
        -Wnull-dereference, -Wdouble-promotion, -Wformat=2]
---
If:
  PathMatch: [.*\.c, .*\.h]
CompileFlags:
  Add: [-std=c11]
  Remove: [-xc++, -std=c++20]
#+END_SRC
** Cling installation
On WSL, install the necessary dependencies: https://root.cern/install/dependencies/#ubuntu-and-other-debian-based-distributions
Then get cling from https://root.cern/download/cling/
Use the =bunzip cling.tar.bz2= and =tar -xf cling.tar= commands to decompress and extract the cling directory.
Add the following bat script to the PATH on Windows
#+BEGIN_SRC bat
@echo off
wsl /path/to/cling-dir/bin/cling
#+END_SRC
** include/ and lib/ dirs
Set the =CPATH= env var to =portapps/C and C++ ecosystem/include=. Set the =LIBRARY_PATH= env var to =portapps/C and C++ ecosystem/bin=.
** CMake installation
Install CMake. Install Ninja. Install the CMake language server using =pip install cmake-language-server=.
** OpenGL
- Get =glslangValidator= from https://github.com/KhronosGroup/glslang/releases/tag/master-tot and place it in =pathapps=.

* Java
- Install the JDK
- Set the =JAVA_HOME= environment variable to =C:\Program Files\Java\jdk-16.0.2= (or similar)
** Maven installation
Download and unzip the maven package and place it in =apps\portapps=.
Add =C:\Users\HAIER\Desktop\apps\portapps\apache-maven-3.8.6= (or similar) to the path.

* Python
** Known issues
*** Flycheck executable for python not being configured
Produces this error when opening a python file:
#+begin_src
Suspicious state from syntax checker python-pycompile: Flycheck checker python-pycompile returned 49, but its output contained no errors
#+end_src
This is fixed in config.el, but this may break if the name of executable is different on another system.

* HTML
** html-tidy formatter
Run =choco install html-tidy=
*** Configuration
Done inside a single file. The filename or extension does not matter, however .yaml was chosen as it provides syntax highlighting. Currently, my config file is at =apps/configuration/htmltidy.yaml=. Set the =HTML_TIDY= environment variable to point to this file.

#+begin_src yaml
wrap: 100
gnu-emacs: yes
indent: auto
#+end_src

References:
http://api.html-tidy.org/tidy/tidylib_api_5.2.0/tidy_config.html
http://api.html-tidy.org/tidy/tidylib_api_5.2.0/quick_ref.html for documentation on individual configuration options

* Markdown
** Enabling preview support
Install marked using =npm install -g marked=

* Further work
** Dictionaries
The =hunspell= directory in [[C:\Users\brain\AppData\Local\Programs\MiKTeX]] could offer some guide.
